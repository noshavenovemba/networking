--- repositories ---
install apt-transport-https
grep -rnw '/path/to/somewhere/' -e 'pattern'

--- services ---
/etc/init.d/apache restart 
/etc/init.d // install daemon
syscall // user call to OS through fork, exec
signal // program send signal to another program (hangup. quit, kill, stop)
zombie process // parent ack not ockured
inode // data structure to describe a file, symbolic-softlink(own inode) and hardlink
vnode // may be on another pc
dmesg // displays kernel-related messages retrieved from the kernel ring buffer
inetd // ftp, pop3, telnet etc
/dev/null // eats any text, returns EoF
/etc/ncheck // generate name from inode
/etc/fstab // file system info
/etc/os-release/ // os name
/etc/haproxy/
/etc/rsyslog.d/
/etc/modprobe/ // load modules
/etc/yum.repos.d/
/etc/inittab/ // initialisaing programs
/etc/shadow/ // ecnrytped /etc/passwd/
/etc/sysconfig/kudzu/ // detect new HW
/etc/hosts/
/etc/name.d/

--- files commands ---
ls -li /usr/file/ // show link
stat // show inode information
inode // list of free inode
tail -r // print last few lines
chown // change owner
chroot // change the root directory
glimpse // search text
comm // compare files
uniq // find duplicate lines
tee // reads input and writes to the file
tpipe // like tee, but passes to pipe
pushd _or_ popd // jump between files
lookfor // all files in dir
ren xx yy // rename file
rm -i // delete
entomb // set unset of immutable attributes
tar -cvf // tar -xvf to unarchive
sed 's/1/2' //replace all 1 with 2
cat file.txt | tr "[a-z][A-Z]" // replace small with capitals
awk '/string5/ {print}' file.txt
lpr // print to printer
passwd // change password
bg _or_ fg // bring background or foreground
lp // print a job (lpstat)
--- regexp in files ---
^ // begining (^^ = ^\^) 
$ // end of file (\$$ = $$)

--- hardware commands ---
lscpu // gathers cpu architecture
uptime // shows load average - keep track of system resources, monitor
free -m // show free and used physical memory
top // show active processes
cat /proc/PID/cmdline // find process executable or ls -la /proc/PID/exe (symbolic link)
lsmod // show loaded modules
vmstat // show swap
du // disk usage
lsblk // list of all block devices
fdisk -l // manage disk partition (or gdisk)
lvcreate // create logical volumes
lvextend // delete logical volumes
edquota // disk per user
vgextend // dnamically extend lvm volumes
gdisk /dev/sdc // create partition
mkfs.ext3 -L // create file system in partition
mount /dev/sdc/ /mnt/disk1 // mout partition to device
iostat // monitoring system input/output statistics for devices and partitions

--- networking ---
firewall -cmd
nmap // network scan
ufw // easy netfilter firewall
ip addr add // conf IP
ip link set up // link up
ip route add //
/etc/init.d/networking/
/etc/init.d/bounding/
/etc/sysconfig/network-scripts/ or /etc/sysconfig/network/ifcfc-ens3/
hosts.allow // file to specific IP
iptables -L // list all // iptables -A // allow // iptables -P // deny //
unbound // A(hostname to IP), CNAME (hostname - hostname), PTR (IP to hostname)
--- NAT CONFIGURATION ---
sudo nano /etc/sysctl.conf // (net.ipv4.ip_forward = 1)
sudo apt install iptables-persistent
sudo iptables -t nat -A POSTROUTING -j MASQUERADE
sudo sh -c “iptables-save > /etc/iptables/rules.v4”
sysctl -p /etc/sysctl.conf
service network restart
--- BRIDGE CONFIGURATION ---
apt-get install bridge-utils
nano /etc/netplan/... 
//network:
  version: 2
  renderer: networkd
  ethernets:
    enp1s0:
      dhcp4: no
  bridges:
    br0:
      dhcp4: yes
      interfaces:
	     - enp1s0
sudo netplan apply
sudo brctl show
--- BRIDGE NMCLI ---
sudo nmcli conn add type bridge con-name br0 ifname br0
sudo nmcli conn add type ethernet slave-type bridge con-name bridge-br0 ifname enp1s0 master br0
sudo nmcli conn show --active
sudo nmcli conn up br0
sudo nmcli conn down Ethernet\ connection\ 1
sudo nmcli conn show --active
   
--- reg exp ---
& // job on a background
$x:h // head of pathname
:r // root
:t // tail
:p // print command
`substitution` // substitution, replace a command
< // sort file
!$ // take the last thing for lat string
!:n* // take arguments n through the last string
$ // end of file
^ // previous command
! // last command
&& // run when previous command success
?af? // contains 'af'
!! // repeats last command
> // stderr
>> // stdout to the EoF

--- nginx ---
server {
listen 8080;
server_name 192.168.2.1;

location / {
  proxy_pass http://192.168.2.1:80/;
}
--- REST API METHODS ---
GET	Retrieve information about the REST API resource
POST	Create a REST API resource
PUT	Update a REST API resource
DELETE	Delete a REST API resource or related component
